# Generated by Django 2.2.9 on 2020-06-23 18:56
import django.db.models.deletion
from cms import api
from cms.models import CMSPlugin
from django.db import migrations
from django.db import models


def transfer_route_location_plugin_data(apps, schema_editor):

    RouteLocationPluginTemp = apps.get_model('aldryn_locations', 'RouteLocationPluginTemp')
    for broken_plugin in RouteLocationPluginTemp.objects.all():
        broken_cms_plugin = CMSPlugin.objects.get(pk=broken_plugin.pk)
        page = broken_cms_plugin.placeholder.page

        if page and _is_page_published(page):
            draft_page = page.get_draft_object()
            draft_placeholder = draft_page.placeholders.get(slot=broken_cms_plugin.placeholder.slot)
            draft_plugins = draft_placeholder.get_plugins()
            draft_parent_map_plugins = list(
                filter(
                    lambda draft_plugin: (
                        draft_plugin.plugin_type == broken_cms_plugin.parent.plugin_type and
                        draft_plugin.get_bound_plugin().title == broken_cms_plugin.parent.get_bound_plugin().title and
                        _is_numchild_value_broken(draft_plugin)
                    ),
                    draft_plugins
                )
            )

            if draft_parent_map_plugins:
                # For now we'll take the first available MapPlugin in the placeholder
                draft_parent_map_plugin = draft_parent_map_plugins[0]

                # Fix the broken numchild field's value
                draft_parent_map_plugin.numchild = draft_parent_map_plugin.get_children().count()
                draft_parent_map_plugin.save()

                api.add_plugin(
                    placeholder=draft_placeholder,
                    language=broken_plugin.language,
                    target=draft_parent_map_plugin,
                    address=broken_plugin.address,
                    zipcode=broken_plugin.zipcode,
                    city=broken_plugin.city,
                    content=broken_plugin.content,
                    depth=broken_plugin.depth,
                    plugin_type=broken_plugin.plugin_type,
                    creation_date=broken_plugin.creation_date,
                    changed_date=broken_plugin.changed_date,
                    lat=broken_plugin.lat,
                    lng=broken_plugin.lng,
                )

        api.add_plugin(
            placeholder=broken_cms_plugin.placeholder,
            language=broken_plugin.language,
            target=broken_cms_plugin.parent,
            address=broken_plugin.address,
            zipcode=broken_plugin.zipcode,
            city=broken_plugin.city,
            content=broken_plugin.content,
            depth=broken_plugin.depth,
            plugin_type=broken_plugin.plugin_type,
            creation_date=broken_plugin.creation_date,
            changed_date=broken_plugin.changed_date,
            lat=broken_plugin.lat,
            lng=broken_plugin.lng,
        )


def _is_numchild_value_broken(plugin):
    # The 'numchild' value of broken plugins is greater than actual count of child plugins
    return plugin.numchild > plugin.get_children().count()


def _is_page_published(page):
    return not page.publisher_is_draft


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0022_auto_20180620_1551'),
        ('aldryn_locations', '0005_auto_20180507_1427'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='RouteLocationPlugin',
            new_name='RouteLocationPluginTemp',
        ),
        migrations.CreateModel(
            name='RouteLocationPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='aldryn_locations_routelocationplugin', serialize=False, to='cms.CMSPlugin')),
                ('address', models.CharField(max_length=255, verbose_name='address')),
                ('zipcode', models.CharField(max_length=30, verbose_name='zip code')),
                ('city', models.CharField(max_length=255, verbose_name='city')),
                ('content', models.CharField(blank=True, help_text='Displayed in a info window above location marker', max_length=255, verbose_name='Content')),
                ('lat', models.FloatField(blank=True, help_text='Use latitude & longitude to fine tune the map position.', null=True, verbose_name='latitude')),
                ('lng', models.FloatField(blank=True, null=True, verbose_name='longitude')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.RunPython(transfer_route_location_plugin_data),
        migrations.DeleteModel(
            name='RouteLocationPluginTemp',
        ),
    ]
